{"version":3,"sources":["src/index.js"],"names":["nameArr","map","name","console","log"],"mappings":";AA0HA,IAAMA,EAAU,CAAC,OAAQ,QAAS,QASlCA,EAAQC,IAAI,SAACC,GAASC,OAAAA,QAAQC,IAAIF","file":"src.f0518a64.js","sourceRoot":"..","sourcesContent":["// var val1 = \"varvar\";\n// console.log(val1);\n\n// val1 = \"var rename\";\n// console.log(val1);\n\n// var val1 = \"var rename2\";\n// console.log(val1);\n\n// let val2='let_hensu'\n// console.log(val2)\n\n// val2='let_hensu_rename';\n// console.log(val2);\n\n// let val2='let_hensu_rerename'\n//letは再宣言不可能\n//constは再宣言も上書きも不可能\n\n// const val3 = {\n//   name: 'dano',\n//   age: 23\n// };\n// val3.name='jyp';\n// console.log(val3);\n// //objの中身は変更可能\n// val3.address='hiroshima';\n// console.log(val3);\n\n//constで定義したObjはプロパティの変更が可能\n\n// const val4=['dog','cat'];\n// val4[0]='bird';\n// console.log(val4);\n// val4.push('monkey');\n// console.log(val4);\n\n/*\ntemplate\n*/\n\n// const name = \"dano\";\n// const age = \"23\";\n// //my name is dano,23 years old\n// const message1 = \"my name is \" + name + \", \" + age + \"years old\";\n// console.log(message1);\n// //tenplate\n// const message2 = `my name is ${name}, ${age}years old`;\n// console.log(message2);\n\n/*arrow*/\n\n/*standard*/\n// function func1(str) {\n//   return str;\n// }\n// console.log(func1(\"f*ck1\"));\n\n// /*arrow*/\n// const func2 = (str) => str; //処理が一行で終わってそれを返すものはreturnを省略可能\n// console.log(func2(\"f*ck2\"));\n\n// const func3=(num1,num2)=>{\n//   return num1+num2;\n// };\n// console.log(func3(1888,19999));\n\n// const myProfile = {\n//   name: \"dano\",\n//   age: 23\n// };\n// const message1 = `my name is ${myProfile.name},${myProfile.age} years old`;\n// console.log(message1);\n\n// const {name,age }=myProfile; //分割代入\n\n// const message2 = `my name is ${name},${age} years old`;\n// console.log(message2);\n\n//配列の場合の分割代入は順番に注意\n// const myProfile = [\"dano\", 23];\n// const message3 = `my name is ${myProfile[0]},${myProfile[1]} years old`;\n// console.log(message3);\n\n// const [name,age]=myProfile;\n// const message4 = `my name is ${name},${age} years old`;\n// console.log(message4);\n\n/*default,argument(引数)*/\n// const sayHelllo = (name='unknown') => console.log(`Hello ${name}!`);\n// sayHelllo('dano');\n\n/*spread construction(スプレッド構文) 「...」*/\n//配列の展開\n// const arr1=[1,2];\n// // console.log(arr1);\n// // console.log(...arr1);\n// const sumFunc=(num1,num2)=>console.log(num1+num2);\n// sumFunc(arr1[0],arr1[1]);\n// sumFunc(...arr1);\n//スプレッド構文は順番に処理する\n\n//まとめる\n// const arr2=[1,2,3,4,5];\n// const [num1,...arr3]=arr2;\n// console.log(num1);\n// console.log(arr3);\n\n//配列のコピー\n// const arr4=[10,20];\n// const arr5=[30,40];\n\n// const arr6=[...arr4];\n// console.log(arr6);\n// arr6[0]=10000;\n// console.log(arr6);\n// console.log(arr4);\n\n// const arr7=[...arr4,...arr5];\n// console.log(arr7);\n\n/*map,filter*/\nconst nameArr = [\"john\", \"james\", \"dano\"];\n// for (let index = 0; index < nameArr.length; index++){\n//   console.log(nameArr[index]);\n// }\n\n// const nameArr2=nameArr.map((name)=>{\n//   return name;\n// });\n// console.log(nameArr2);\nnameArr.map((name) => console.log(name)); //配列を順次ループしていく処理をfor文使わずに可能\n"]}